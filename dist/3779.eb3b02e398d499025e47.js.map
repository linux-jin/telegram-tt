{"version":3,"file":"3779.eb3b02e398d499025e47.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen, isForceMobileVersion]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      const video = videoRef.current!;\n      video.currentTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  const toggleControlsOnMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser, selectOutlyingListByMessageId,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  isAuthRememberMe?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  isAuthRememberMe,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {isAuthRememberMe && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleClick = useCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  }, [handleUserSelect]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","clamp","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","renderVideoPreview","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","_transformRef$current","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","SenderInfo","fullInfo","fallbackPhoto","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","DEFAULT_ID_PREFIX","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","isSlim","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","isAuthRememberMe","authRememberMe","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","useEffectWithPrevDeps","prevIsActive","otherLanguages","unselected","partition","newDoNotTranslate","v","filteredDisplayedOptions","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","ReactionSelectorReaction","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","_ref6","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","withPortal","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","hiddenMembersMinCount","canHideParticipants","areParticipantsHidden","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}