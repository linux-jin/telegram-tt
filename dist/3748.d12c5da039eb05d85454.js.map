{"version":3,"file":"3748.d12c5da039eb05d85454.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/cycleRestrict.ts"],"sourcesContent":["import type { RLottieApi } from './rlottie.worker';\n\nimport {\n  DPR, IS_SAFARI, IS_ANDROID, IS_IOS,\n} from '../../util/windowEnvironment';\nimport { createConnector } from '../../util/PostMessageConnector';\nimport { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { fastRaf } from '../../util/schedulers';\nimport generateIdFor from '../../util/generateIdFor';\n\ninterface Params {\n  noLoop?: boolean;\n  size?: number;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst MAX_WORKERS = 4;\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst ID_STORE = {};\n\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst workers = new Array(MAX_WORKERS).fill(undefined).map(\n  () => createConnector<RLottieApi>(new Worker(new URL('./rlottie.worker.ts', import.meta.url))),\n);\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      viewId = generateIdFor(ID_STORE, true),\n      params, ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private viewId: string = generateIdFor(ID_STORE, true),\n    private params: Params = {},\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number]) {\n    this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    if (!canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false') {\n      const sizeFactor = this.calcSizeFactor();\n      ensureCanvasSize(canvas, sizeFactor);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      canvas.dataset.isJustCleaned = 'true';\n      fastRaf(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvas.width),\n      y: Math.round((newCoords?.y || 0) * canvas.height),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      let { size } = this.params;\n\n      if (!size) {\n        size = (\n          container.offsetWidth\n          || parseInt(container.style.width, 10)\n          || container.parentNode.offsetWidth\n        );\n\n        if (!size) {\n          throw new Error('[RLottie] Failed to detect width from container');\n        }\n      }\n\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n\n      canvas.style.width = `${size}px`;\n      canvas.style.height = `${size}px`;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      canvas.width = imgSize;\n      canvas.height = imgSize;\n\n      container.appendChild(canvas);\n\n      this.views.set(viewId, {\n        canvas, ctx, onLoad,\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      ensureCanvasSize(canvas, sizeFactor);\n\n      imgSize = Math.round(this.params.size! * sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round((coords?.x || 0) * canvas.width),\n          y: Math.round((coords?.y || 0) * canvas.height),\n        },\n        onLoad,\n      });\n    }\n\n    if (!this.imgSize) {\n      this.imgSize = imgSize;\n      this.imageData = new ImageData(imgSize, imgSize);\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      isLowPriority,\n      size,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(DPR * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    canvas.width = expectedWidth;\n    canvas.height = expectedHeight;\n  }\n}\n\nexport default RLottie;\n","import generateIdFor from './generateIdFor';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n  acceptsBuffer?: boolean;\n}\n\ntype InitData = {\n  channel?: string;\n  type: 'init';\n  messageId?: string;\n  name: 'init';\n  args: any;\n};\n\ntype CallMethodData = {\n  channel?: string;\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\nexport type OriginMessageData = InitData | CallMethodData | {\n  channel?: string;\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerMessageData = {\n  channel?: string;\n  type: 'update';\n  update: ApiUpdate;\n} | {\n  channel?: string;\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  channel?: string;\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  channel?: string;\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessage({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateIdFor(requestStates);\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    if (data.type === 'update' && this.onUpdate) {\n      this.onUpdate(data.update);\n    }\n    if (data.type === 'methodResponse') {\n      const requestState = requestStates.get(data.messageId);\n      if (requestState) {\n        if (data.error) {\n          requestState.reject(data.error);\n        } else {\n          requestState.resolve(data.response);\n        }\n      }\n    } else if (data.type === 'methodCallback') {\n      const requestState = requestStates.get(data.messageId);\n      requestState?.callback?.(...data.callbackArgs);\n    } else if (data.type === 'unhandledError') {\n      throw new Error(data.error?.message);\n    }\n  }\n\n  private postMessage(data: AnyLiteral) {\n    data.channel = this.channel;\n\n    this.target.postMessage(data);\n  }\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","ID_STORE","instancesByRenderId","Map","workers","Array","fill","undefined","map","createConnector","Worker","URL","lastWorkerIndex","RLottie","static","_len","arguments","length","args","_key","canvas","renderId","viewId","generateIdFor","params","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","direction","doPlay","pause","from","values","every","_ref","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","_ref2","startFrameIndex","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","dataset","isJustCleaned","sizeFactor","calcSizeFactor","ensureCanvasSize","width","height","fastRaf","round","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","offsetWidth","parseInt","style","document","createElement","getContext","appendChild","isConnected","imageData","ImageData","isRendererInited","quality","max","DPR","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","lastRenderAt","animate","_ref3","isLoaded","frameIndex","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","min","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","expectedHeight","offsetHeight","ConnectorClass","target","onUpdate","channel","init","postMessage","type","messageData","requestStates","requestStatesByCallback","messageId","payload","requestState","promise","Promise","resolve","reject","Object","assign","withCallback","callback","pop","catch","finally","cancelCallback","progressCallback","isCanceled","onMessage","data","update","error","response","callbackArgs","message","worker","connector","handleMessage","addEventListener","removeEventListener","index"],"sourceRoot":""}